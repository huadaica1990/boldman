include variables/_function.pug
include variables/_mixins.pug
include variables/_variables.pug

doctype html
html(lang='vi-VN' itemscope itemtype='http://schema.org/website' class='no-js')
    include components/_header.pug
    block title
    
    //- CSS
        //- WebFont.js
    script.
        WebFontConfig = {
            custom: {
                families: ['SVN-Poppins'],
                urls: ['/fonts/fonts.css']
            }
            //google: { families: ['Poppins:400,500,600,700,800'] }
        };
        (function (d) {
            var wf = d.createElement('script'), s = d.scripts[0];
            wf.src = '/release/webfont.js';
            wf.async = true;
            s.parentNode.insertBefore(wf, s);
        })(document);
    link(rel='preload' as='font' type='font/ttf' crossorigin='anonymous' href='/icons/customize.ttf')
    link(rel='preload' as='font' type='font/ttf' crossorigin='anonymous' href='/icons/ecs.ttf')
    link(rel='stylesheet' type='text/css' href='/icons/customize.min.css')
    link(rel='stylesheet' type='text/css' href='/icons/icon-default.min.css')
    //- link(rel='preload stylesheet' as='style' type='text/css' crossorigin='anonymous' href='/release/main.min.css')
    
    block style
    body
        //-Facebook plugin
        #fb-root
        script(async defer crossorigin='anonymous' src='https://connect.facebook.net/vi_VN/sdk.js#xfbml=1&version=v12.0' nonce='alK264s0')

        include components/_nav-header.pug
        
        //-Main layout
        block content

        include components/_footer.pug

        #loading
            .loading-content
                .loader
                    
        //- JavaScript
        script(type='text/javascript' src='/release/jquery-3.5.1.min.js')
        script(type='text/javascript' src='/release/lang.min.js')
        //- script(type='text/javascript' src='/wwwroot/templates/website/plugins/plyr-master/plyr.polyfilled.js')
        script.
            //- new Plyr('.plyr-video');
            function addCSS(filename) {
                let head = document.getElementsByTagName('head')[0],
                    style = document.createElement('link');
                style.href = filename;
                //res.as = "style";
                style.type = 'text/css';
                style.rel = 'stylesheet';
                head.appendChild(style);
            }
            function addScript(filename , type = 'text/javascript', id = Date.now(), async = true) {
                let script = document.createElement('script');
                script.src = filename;
                script.type = type;
                script.async = async;
                script.id = id;
                document.body.appendChild(script, document.getElementsByTagName("script")[0]);
            }
            function getSearchFocus(obj) {
                document.getElementById(obj).focus();
                setTimeout(function() {
                    document.getElementById(obj).focus();
                }, 250);
            }
            if (document.documentElement.clientWidth > 1100) {
                setTimeout(function () {
                    //addScript('/release/main.min.js')
                    addScript(`/styles/plugins/instantpage/instantpage.js`)
                }, 3000);
            }
            document.addEventListener("DOMContentLoaded", function () {
                var lazyBackgrounds = [].slice.call(document.querySelectorAll(".lazyload-bg"));
                var lazyIframe = [].slice.call(document.querySelectorAll(".lazyload-iframe"));
                if ("IntersectionObserver" in window) {
                    let lazyBackgroundObserver = new IntersectionObserver(function (entries, observer) {
                        entries.forEach(function (entry) {
                            if (entry.isIntersecting) {
                                entry.target.style.backgroundImage = 'url(' + entry.target.getAttribute('data-bg') + ')';
                                entry.target.classList.remove("lazyload-bg");
                                entry.target.classList.add("ls-is-cached", "lazyloaded");
                                lazyBackgroundObserver.unobserve(entry.target);
                            }
                        });
                    });
                    let lazyIframeObserver = new IntersectionObserver(function (entries, observer) {
                        entries.forEach(function (entry) {
                            if (entry.isIntersecting) {
                                entry.target.setAttribute('src', entry.target.getAttribute('data-src'));
                                entry.target.classList.remove("lazyload-iframe");
                                entry.target.classList.add("ls-is-cached", "lazyloaded");
                                lazyIframeObserver.unobserve(entry.target);
                            }
                        });
                    });

                    lazyBackgrounds.forEach(function (lazyBackground) {
                        lazyBackgroundObserver.observe(lazyBackground);
                    });
                    lazyIframe.forEach(function (lazyIframe) {
                        lazyIframeObserver.observe(lazyIframe);
                    });
                }
            });
        block script
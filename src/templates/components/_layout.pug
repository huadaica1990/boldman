include ../variables/_function.pug
include ../variables/_mixins.pug
include ../variables/_variables.pug

doctype html
html(lang='vi-VN' itemscope itemtype='http://schema.org/website' class='no-js')
    head
        include _header.pug
        block title
        //- WebFont.js
        script.
            WebFontConfig = {
                custom: {
                    families: ['SVN-Poppins'],
                    urls: ['/wwwroot/templates/website/fonts/fonts.css']
                }
                //google: { families: ['Poppins:400,500,600,700,800'] }
            };
            (function (d) {
                var wf = d.createElement('script'), s = d.scripts[0];
                wf.src = '/wwwroot/templates/website/release/webfontloader.min.js';
                wf.async = true;
                s.parentNode.insertBefore(wf, s);
            })(document);
        link(rel='preload' as='font' type='font/ttf' crossorigin='anonymous' href='/wwwroot/templates/website/icons/customize.ttf')
        link(rel='preload' as='font' type='font/ttf' crossorigin='anonymous' href='/wwwroot/templates/website/icons/ecs.ttf')
        link(rel='stylesheet' type='text/css' href='/wwwroot/templates/website/icons/customize.min.css')
        link(rel='stylesheet' type='text/css' href='/wwwroot/templates/website/icons/default.min.css')
        //- link(rel='preload stylesheet' as='style' type='text/css' crossorigin='anonymous' href='/release/main.min.css')
        block style
        
    body
        //-Facebook plugin
        #fb-root
        script(async defer crossorigin='anonymous' src='https://connect.facebook.net/vi_VN/sdk.js#xfbml=1&version=v12.0' nonce='alK264s0')

        include _nav-header.pug
        
        //-Main layout
        block content

        include _footer.pug

        #loading
            .loading-content
                .loader-precent 0%
                .loader
                    
        //- JavaScript
        script(type='text/javascript' src='/wwwroot/templates/website/release/jquery.min.js')
        script(type='text/javascript' src='/wwwroot/templates/website/release/lang.min.js')
        //- script(type='text/javascript' src='/wwwroot/templates/website/website/plugins/plyr-master/plyr.polyfilled.js')
        script.
            //- new Plyr('.plyr-video');
            function addCSS(filename) {
                let head = document.getElementsByTagName('head')[0],
                    style = document.createElement('link');
                style.href = filename;
                //res.as = "style";
                style.type = 'text/css';
                style.rel = 'stylesheet';
                head.appendChild(style);
            }
            function addScript(filename, type = "text/javascript", async = true, id = Date.now()) {
                return new Promise((resolve, reject) => {
                    try {
                        let script = document.createElement("script");
                        script.src = filename;
                        script.type = type;
                        script.async = async;
                        script.id = id;
                        script.addEventListener("load", () => {
                            resolve({
                                loaded: true,
                                error: false
                            });
                        });
                        script.addEventListener("error", () => {
                            reject({
                                loaded: false,
                                error: true,
                                message: `Failed to load script with src ${filename}`,
                            });
                        });
                        document.body.appendChild(script, document.getElementsByTagName("script")[0]);
                    } catch (error) {
                        reject(error);
                    }
                })
            };
            function getSearchFocus(obj) {
                document.getElementById(obj).focus();
                setTimeout(function() {
                    document.getElementById(obj).focus();
                }, 250);
            }
            if (document.documentElement.clientWidth > 1100) {
                setTimeout(function () {
                    //addScript('/release/main.min.js')
                    addScript(`/wwwroot/templates/website/release/instantpage.min.js`)
                }, 3000);
            }
            document.addEventListener("DOMContentLoaded", function () {
                var lazyBackgrounds = [].slice.call(document.querySelectorAll(".lazyload-bg"));
                var lazyIframes = [].slice.call(document.querySelectorAll(".lazyload-iframe"));
                var lazyVideos = [].slice.call(document.querySelectorAll(".lazyload-video"));
                if ("IntersectionObserver" in window) {
                    let lazyBackgroundObserver = new IntersectionObserver(function (entries, observer) {
                        entries.forEach(function (entry) {
                            if (entry.isIntersecting) {
                                entry.target.style.backgroundImage = 'url(' + entry.target.getAttribute('data-bg') + ')';
                                entry.target.classList.remove("lazyload-bg");
                                entry.target.classList.add("ls-is-cached", "lazyloaded");
                                lazyBackgroundObserver.unobserve(entry.target);
                            }
                        });
                    });
                    let lazyIframeObserver = new IntersectionObserver(function (entries, observer) {
                        entries.forEach(function (entry) {
                            if (entry.isIntersecting) {
                                entry.target.setAttribute('src', entry.target.getAttribute('data-src'));
                                entry.target.classList.remove("lazyload-iframe");
                                entry.target.classList.add("ls-is-cached", "lazyloaded");
                                lazyIframeObserver.unobserve(entry.target);
                            }
                        });
                    });
                    let lazyVideoObserver = new IntersectionObserver(function (entries, observer) {
                        entries.forEach(function (entry) {
                            if (entry.isIntersecting) {
                                for (var source in entry.target.children) {
                                    var videoSource = entry.target.children[source];
                                    if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE") {
                                        videoSource.src = videoSource.dataset.src;
                                    }
                                }
                                entry.target.load();
                                entry.target.classList.remove("lazyload-video");
                                entry.target.classList.add("ls-is-cached", "lazyloaded");
                                lazyVideoObserver.unobserve(entry.target);
                            }
                        });
                    });

                    lazyBackgrounds.forEach(function (lazyBackground) {
                        lazyBackgroundObserver.observe(lazyBackground);
                    });
                    lazyIframes.forEach(function (lazyIframe) {
                        lazyIframeObserver.observe(lazyIframe);
                    });
                    lazyVideos.forEach(function (lazyVideo) {
                        lazyVideoObserver.observe(lazyVideo);
                    });
                }
            });
        block script
/**
 * @Description: chứa các mix định dạng sẵn dùng phương thức @include mix().
 *
 * @Summary:
 *
 *    1. Common
 *        - border | top | bottom | left | right
 *        - animation | unanimation
 *        - clearfix | unclearfix
 *    2. Box shadow
 *        - box-shadow1 | 2 | 3 | 4 | 5
 *    3. Img effect
 *        - center-img # center-img-nohover
 *        - scale-img | imgslow
 *        - opacity-img
 *    4. Flex
 *        - item-flex
 *        - flex-container | center | left | right # non-flex-container
 *    5. V-element
 *        - v-height
 *        - v-mid | top | bot
 *    6. Grid
 */

/*#region Responsive*/
// unitless function to convert px to em
@function em($pixels, $context: $font-size) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return $pixels / $context * 1em;
}

@mixin breakpoint-font($value) {

	@each $breakpoint,
	$value-item in $value {
		@if $breakpoint ==null {
			font-size: em($value-item);
			line-height: $value-item*1.5;
		}

		@else {
			@include breakpoint($breakpoint) {
				font-size: em($value-item);
				line-height: $value-item*1.5;
			}
		}
	}
}

@mixin breakpoint($mq01: 0, $mq02: false, $maxmin: max-width, $mq-breakpoints: $breakpoints) {
	@if map-has-key($mq-breakpoints, $mq01) {
		$mq01: map-get($mq-breakpoints, $mq01);
	}

	@if map-has-key($mq-breakpoints, $mq02) {
		$mq02: map-get($mq-breakpoints, $mq02);
	}

	@if $mq02 ==false {
		@media screen and ($maxmin: #{$mq01}) {
			@content;
		}
	}

	@else {
		@media (min-width: #{$mq01}) and (max-width: #{$mq02}) {
			@content;
		}
	}
}

/*#endregion*/

/*#region Common*/
@mixin border ($position: "all", $size: 1px, $style: solid, $color: $border-color) {
	@if($position =="all") {
		border: $size $style $color;
	}

	@if($position =="top") {
		border-top: $size $style $color;
	}

	@if($position =="bot") {
		border-bottom: $size $style $color;
	}

	@if($position =="left") {
		border-left: $size $style $color;
	}

	@if($position =="right") {
		border-right: $size $style $color;
	}
}

@mixin filter($val) {
	-webkit-filter: $val;
	filter: $val;
}

@mixin animation($hover: true, $customize: false, $type: all, $time: 0.5s, $effect: $cubic, $delay: 0s) {
	@if $hover {
		@if $customize {
			@content
		}

		@else {
			-ms-transition: $type $time $effect $delay;
			-webkit-transition: $type $time $effect $delay;
			-moz-transition: $type $time $effect $delay;
			-o-transition: $type $time $effect $delay;
			transition: $type $time $effect $delay;
		}
	}

	@else {
		-ms-transition: initial;
		-webkit-transition: initial;
		-moz-transition: initial;
		-o-transition: initial;
		transition: initial;
	}
}

@mixin transform($args) {
	-webkit-transform: $args;
	-moz-transform: $args;
	-ms-transform: $args;
	-o-transform: $args;
	transform: $args;
}

@mixin transform-origin($args) {
	-webkit-transform-origin: $args;
	-moz-transform-origin: $args;
	-ms-transform-origin: $args;
	-o-transform-origin: $args;
	transform-origin: $args;
}

@mixin use-keyframes($args) {
	-webkit-animation: $args;
	-moz-animation: $args;
	-ms-animation: $args;
	-o-animation: $args;
	animation: $args;
}

@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}

	@-moz-keyframes #{$animation-name} {
		@content;
	}

	@-ms-keyframes #{$animation-name} {
		@content;
	}

	@-o-keyframes #{$animation-name} {
		@content;
	}

	@keyframes #{$animation-name} {
		@content;
	}
}

@mixin clearfix($active: true) {
	@if $active {

		&:after,
		&:before {
			content: " ";
			display: table;
		}

		&:after {
			clear: both;
		}
	}

	@else {

		&:after,
		&:before {
			content: initial;
			display: initial;
		}

		&:after {
			clear: initial;
		}
	}
}

@mixin overtext ($row: 1, $h: auto) {
	display: -webkit-box;
	-webkit-line-clamp: $row;
	-webkit-box-orient: vertical;
	overflow: hidden;
	height: $h;

	@if($row ==1) {
		//white-space: nowrap;
		white-space: initial;
		text-overflow: ellipsis;
	}
}

@mixin text($size: $font-size, $family : $font-family-primary, $height: $lh-0, $color: $body-color, $transform: $text-normal) {
	font-size: $size;
	font-family: $family;
	line-height: $height;
	color: $color;
	text-transform: $transform;
}

@mixin e-cen ($type: "all", $option: translate(-50%, -50%)) {
	@if($type =="all") {
		top: 50%;
		left: 50%;
		-ms-transform: translate(-50%, -50%);
		-webkit-transform: translate(-50%, -50%);
		transform: translate(-50%, -50%);
		-moz-transform: translate(-50%, -50%);
		-o-transform: translate(-50%, -50%);
	}

	@if($type =="cus") {
		top: 50%;
		left: 50%;
		-ms-transform: $option;
		-webkit-transform: $option;
		transform: $option;
		-moz-transform: $option;
		-o-transform: $option;
	}

	@if($type =="top") {
		top: 50%;
		-ms-transform: translateY(-50%);
		-webkit-transform: translateY(-50%);
		transform: translateY(-50%);
		-moz-transform: translateY(-50%);
		-o-transform: translateY(-50%);
	}

	@if($type =="left") {
		left: 50%;
		-ms-transform: translateX(-50%);
		-webkit-transform: translateX(-50%);
		transform: translateX(-50%);
		-moz-transform: translateX(-50%);
		-o-transform: translateX(-50%);
	}
}

@mixin visible($active: false, $zindex: 99) {
	@if $active {
		opacity: 1;
		visibility: visible;
		pointer-events: auto;
		z-index: $zindex;
	}

	@else {
		opacity: 0;
		visibility: hidden;
		pointer-events: none;
		z-index: -$zindex;
	}
}

@mixin custom-scrollbar ($w: 3px, $h: 3px, $color: $primary-color, $bg: rgb(111, 111, 111)) {
	&::-webkit-scrollbar {
		height: $h;
		width: $w;
	}

	&::-webkit-scrollbar-track {
		background: $bg;
	}

	&::-webkit-scrollbar-thumb {
		background: $primary-color;
		width: $w;
	}
}

@mixin gradient ($key: "background") {
	@content;

	@if ($key =="text") {
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		-moz-background-clip: text;
		-moz-text-fill-color: transparent;
	}
}

@mixin bg-mask ($value: rgba(0, 0, 0, .5)) {
	position: relative;

	&:after {
		position: absolute;
		content: '';
		z-index: 2;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: $value;
	}
}

/*#endregion*/

/*#region Box shadow*/
@mixin box-shadow($number: 0) {
	@if($number ==0) {
		-moz-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
		-webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
		box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);

	}

	@if($number ==1) {
		-moz-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, .16), 0 2px 10px 0 rgba(0, 0, 0, .12);
		-webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, .16), 0 2px 10px 0 rgba(0, 0, 0, .12);
		box-shadow: 0 2px 5px 0 rgba(0, 0, 0, .16), 0 2px 10px 0 rgba(0, 0, 0, .12);
	}

	@if($number ==2) {
		-moz-box-shadow: 0 5px 11px 0 rgba(0, 0, 0, .18), 0 4px 15px 0 rgba(0, 0, 0, .15);
		-webkit-box-shadow: 0 5px 11px 0 rgba(0, 0, 0, .18), 0 4px 15px 0 rgba(0, 0, 0, .15);
		box-shadow: 0 5px 11px 0 rgba(0, 0, 0, .18), 0 4px 15px 0 rgba(0, 0, 0, .15);
	}

	@if($number ==3) {
		-moz-box-shadow: 0 8px 17px 0 rgba(0, 0, 0, .2), 0 6px 20px 0 rgba(0, 0, 0, .19);
		-webkit-box-shadow: 0 8px 17px 0 rgba(0, 0, 0, .2), 0 6px 20px 0 rgba(0, 0, 0, .19);
		box-shadow: 0 8px 17px 0 rgba(0, 0, 0, .2), 0 6px 20px 0 rgba(0, 0, 0, .19);
	}

	@if($number ==4) {
		-moz-box-shadow: 0 12px 15px 0 rgba(0, 0, 0, .24), 0 17px 50px 0 rgba(0, 0, 0, .19);
		-webkit-box-shadow: 0 12px 15px 0 rgba(0, 0, 0, .24), 0 17px 50px 0 rgba(0, 0, 0, .19);
		box-shadow: 0 12px 15px 0 rgba(0, 0, 0, .24), 0 17px 50px 0 rgba(0, 0, 0, .19);
	}

	@if($number ==5) {
		-moz-box-shadow: 0 16px 28px 0 rgba(0, 0, 0, .22), 0 25px 55px 0 rgba(0, 0, 0, .21);
		-webkit-box-shadow: 0 16px 28px 0 rgba(0, 0, 0, .22), 0 25px 55px 0 rgba(0, 0, 0, .21);
		box-shadow: 0 16px 28px 0 rgba(0, 0, 0, .22), 0 25px 55px 0 rgba(0, 0, 0, .21);
	}

	@if($number ==6) {
		-moz-box-shadow: 0 27px 24px 0 rgba(0, 0, 0, .2), 0 40px 77px 0 rgba(0, 0, 0, .22);
		-webkit-box-shadow: 0 27px 24px 0 rgba(0, 0, 0, .2), 0 40px 77px 0 rgba(0, 0, 0, .22);
		box-shadow: 0 27px 24px 0 rgba(0, 0, 0, .2), 0 40px 77px 0 rgba(0, 0, 0, .22);
	}
}

@mixin shadow($val: 0 0 10px 0 rgba(0, 0, 0, .1)) {
	-moz-box-shadow: $val;
	-webkit-box-shadow: $val;
	box-shadow: $val;
}

@mixin border-radius($val: 5px) {
	border-radius: $val;
	-webkit-border-radius: $val;
	-moz-border-radius: $val;
	-ms-border-radius: $val;
	-o-border-radius: $val;
	background-clip: padding-box;
	/* stops bg color from leaking outside the border: */
}

/*#endregion*/

/*#region Img effect*/
@mixin center-img ($hover: true, $type: "scale") {
	@if $hover {
		.img {
			display: block;
			overflow: hidden;
			position: relative;
			width: auto;
			height: 300px;

			picture {
				height: inherit;
				position: initial;
				display: inherit;
			}

			img {
				position: absolute;
				min-height: 100%;
				min-width: 100%;
				max-width: inherit;
				height: 100%;
				width: auto;
				top: 50%;
				left: 50%;
				-o-object-fit: cover;
				object-fit: cover;
				-ms-transform: translate(-50%, -50%) scale(1);
				-webkit-transform: translate(-50%, -50%) scale(1);
				transform: translate(-50%, -50%) scale(1);
				-moz-transform: translate(-50%, -50%) scale(1);
				-o-transform: translate(-50%, -50%) scale(1);
			}
		}

		@if ($type =="scale") {
			.img img {
				@include animation();
			}

			&:hover {
				.img img {
					-webkit-transform: translate(-50%, -50%) scale(1.1);
					-ms-transform: translate(-50%, -50%) scale(1.1);
					transform: translate(-50%, -50%) scale(1.1);
					-moz-transform: translate(-50%, -50%) scale(1.1);
					-o-transform: translate(-50%, -50%) scale(1.1);
				}
			}
		}

		@if ($type =="slow") {
			.img img {
				-ms-transition: transform 1s ease-out;
				-webkit-transition: transform 1s ease-out;
				-moz-transition: transform 1s ease-out;
				-o-transition: transform 1s ease-out;
				transition: transform 1s ease-out;
			}

			&:hover {
				.img img {
					-webkit-transform: translate(-50%, -50%) scale(1.1);
					-moz-transform: translate(-50%, -50%) scale(1.1);
					-ms-transform: translate(-50%, -50%) scale(1.1);
					-o-transform: translate(-50%, -50%) scale(1.1);
					transform: translate(-50%, -50%) scale(1.1);
				}
			}
		}

		@if ($type =="opacity") {
			.img img {
				@include animation();
				opacity: 1;
			}

			&:hover {
				.img img {
					opacity: 0.8;
				}
			}
		}

		@if ($type =="rotate") {
			.img img {
				-webkit-transform: translate(-50%, -50%) scale(1) rotate(0deg);
				-moz-transform: translate(-50%, -50%)scale(1) rotate(0deg);
				-ms-transform: translate(-50%, -50%) scale(1) rotate(0deg);
				-o-transform: translate(-50%, -50%) scale(1) rotate(0deg);
				transform: translate(-50%, -50%) scale(1) rotate(0deg);


				-ms-transition: transform .3s ease-in-out;
				-webkit-transition: transform .3s ease-in-out;
				-moz-transition: transform .3s ease-in-out;
				-o-transition: transform .3s ease-in-out;
				transition: transform .3s ease-in-out;
			}

			&:hover {
				.img img {
					-webkit-transform: translate(-50%, -50%) scale(1.3) rotate(8deg);
					-moz-transform: translate(-50%, -50%) scale(1.3) rotate(8deg);
					-ms-transform: translate(-50%, -50%) scale(1.3) rotate(8deg);
					-o-transform: translate(-50%, -50%) scale(1.3) rotate(8deg);
					transform: translate(-50%, -50%) scale(1.3) rotate(8deg);
				}
			}
		}

		@if ($type =="tranX") {
			.img img {
				@include animation();
				transform: translate(0, -50%) scale(1.1);
				-webkit-transform: translate(0px, -50%) scale(1.1);
				-moz-transform: translate(0px, -50%) scale(1.1);
				-ms-transform: translate(0px, -50%) scale(1.1);
				-o-transform: translate(0px, -50%) scale(1.1);
				left: 0;
			}

			&:hover {
				.img img {
					transform: translate(6px, -50%) scale(1.1);
					-webkit-transform: translate(6px, -50%) scale(1.1);
					-moz-transform: translate(6px, -50%) scale(1.1);
					-ms-transform: translate(6px, -50%) scale(1.1);
					-o-transform: translate(6px, -50%) scale(1.1);
				}
			}
		}
	}

	@else {
		display: block;
		overflow: hidden;
		position: relative;
		width: auto;
		height: 300px;

		picture {
			height: inherit;
			position: initial;
			display: inherit;
		}

		img {
			position: absolute;
			min-height: 100%;
			min-width: 100%;
			max-width: inherit;
			height: 100%;
			width: auto;
			top: 50%;
			left: 50%;
			-webkit-transform: translate(-50%, -50%);
			-moz-transform: translate(-50%, -50%);
			-ms-transform: translate(-50%, -50%);
			-o-transform: translate(-50%, -50%);
			transform: translate(-50%, -50%);
			-o-object-fit: cover;
			object-fit: cover;
		}
	}
}

/*#endregion*/

/*#region Flex*/
@mixin flex ($type: "container", $active: true, $get: "basic") {
	@if $active {
		@if($type =="container") {
			-webkit-box-direction: normal;
			-webkit-box-direction: normal;
			-webkit-box-orient: horizontal;
			-webkit-box-orient: horizontal;
			display: -webkit-box;
			display: -webkit-flex;
			display: -ms-flexbox;
			display: -moz-box;
			display: flex;
			-webkit-flex-direction: row;
			-ms-flex-direction: row;
			-moz-box-orient: horizontal;
			-moz-box-direction: normal;
			flex-direction: row;
			-webkit-flex-flow: row wrap;
			-ms-flex-flow: row wrap;
			flex-flow: row wrap;
			-ms-flex-pack: distribute;
			-webkit-flex-wrap: wrap;
			-ms-flex-wrap: wrap;
			flex-wrap: wrap;

			@if ($get =="center") {
				-webkit-box-pack: center;
				-ms-flex-pack: center;
				-webkit-justify-content: center;
				-moz-box-pack: center;
				justify-content: center;
			}

			@if ($get =="left") {
				-webkit-box-pack: start;
				-ms-flex-pack: start;
				-webkit-justify-content: flex-start;
				-moz-box-pack: start;
				justify-content: flex-start;
			}

			@if ($get =="right") {
				-webkit-box-pack: end;
				-ms-flex-pack: end;
				-webkit-justify-content: flex-end;
				-moz-box-pack: end;
				justify-content: flex-end;

			}

			@if ($get =="between") {
				-webkit-box-pack: justify;
				-ms-flex-pack: justify;
				-webkit-justify-content: space-between;
				-moz-box-pack: justify;
				justify-content: space-between;

			}

			@if ($get =="top") {
				-webkit-box-align: start;
				-ms-flex-align: start;
				-webkit-align-items: flex-start;
				-moz-box-align: start;
				align-items: flex-start;
			}

			@if ($get =="bot") {
				-webkit-box-align: end;
				-ms-flex-align: end;
				-webkit-align-items: flex-end;
				-moz-box-align: end;
				align-items: flex-end;
			}
		}

		@if($type =="center") {
			display: -webkit-box;
			display: -webkit-flex;
			display: -ms-flexbox;
			display: -moz-box;
			display: flex;

			@if ($get =="left") {
				-webkit-box-align: center;
				-webkit-align-items: center;
				-moz-box-align: center;
				-ms-flex-align: center;
				align-items: center;

				-webkit-box-pack: start;
				-webkit-justify-content: flex-start;
				-moz-box-pack: start;
				-ms-flex-pack: start;
				justify-content: flex-start;
			}

			@else if ($get =="right") {
				-webkit-box-align: center;
				-webkit-align-items: center;
				-moz-box-align: center;
				-ms-flex-align: center;
				align-items: center;

				-webkit-box-pack: end;
				-webkit-justify-content: flex-end;
				-moz-box-pack: end;
				-ms-flex-pack: end;
				justify-content: flex-end;
			}

			@else if ($get =="between") {
				-webkit-box-align: center;
				-webkit-align-items: center;
				-moz-box-align: center;
				-ms-flex-align: center;
				align-items: center;

				-webkit-box-pack: justify;
				-webkit-justify-content: space-between;
				-moz-box-pack: justify;
				-ms-flex-pack: justify;
				justify-content: space-between;
			}

			@else if ($get =="top") {
				-webkit-box-align: start;
				-webkit-align-items: flex-start;
				-moz-box-align: start;
				-ms-flex-align: start;
				align-items: flex-start;

				-webkit-box-pack: center;
				-webkit-justify-content: center;
				-moz-box-pack: center;
				-ms-flex-pack: center;
				justify-content: center;
			}

			@else if ($get =="bot") {
				-webkit-box-align: end;
				-webkit-align-items: flex-end;
				-moz-box-align: end;
				-ms-flex-align: end;
				align-items: flex-end;

				-webkit-box-pack: center;
				-webkit-justify-content: center;
				-moz-box-pack: center;
				-ms-flex-pack: center;
				justify-content: center;
			}

			@else {
				-webkit-box-align: center;
				-webkit-align-items: center;
				-moz-box-align: center;
				-ms-flex-align: center;
				align-items: center;

				-webkit-box-pack: center;
				-webkit-justify-content: center;
				-moz-box-pack: center;
				-ms-flex-pack: center;
				justify-content: center;
			}


			@if ($get =="all") {
				&.flex-left {}

				&.flex-right {}

				&.flex-between {}

				&.flex-top {
					-webkit-box-align: start;
					-ms-flex-align: start;
					-webkit-align-items: flex-start;
					-moz-box-align: start;
					align-items: flex-start;
				}

				&.flex-bot {
					-webkit-box-align: end;
					-ms-flex-align: end;
					-webkit-align-items: flex-end;
					-moz-box-align: end;
					align-items: flex-end;
				}
			}
		}
	}

	@else {
		display: block;
	}
}

@mixin item-flex() {
	-webkit-box-direction: normal;
	-webkit-box-orient: vertical;
	display: -moz-flex;
	display: -ms-flex;
	display: -o-flex;
	display: -webkit-box;
	display: -webkit-flex;
	display: -ms-flexbox;
	display: -moz-box;
	display: flex;
	-webkit-flex-direction: -webkit-column;
	flex-direction: -webkit-column;
	-moz-box-orient: vertical;
	-moz-box-direction: normal;
	flex-direction: -moz-column;
	-ms-flex-direction: -ms-column;
	flex-direction: -ms-column;
	flex-direction: -o-column;
	-webkit-flex-direction: column;
	-ms-flex-direction: column;
	flex-direction: column;

	[class$="details"] {
		-webkit-box-direction: normal;
		-webkit-box-flex: 1;
		-webkit-box-orient: vertical;
		display: -moz-flex;
		display: -ms-flex;
		display: -o-flex;
		display: -webkit-box;
		display: -webkit-flex;
		display: -ms-flexbox;
		display: -moz-box;
		display: flex;
		-moz-flex: 1 0 auto;
		-o-flex: 1 0 auto;
		-webkit-flex: 1 0 auto;
		-ms-flex: 1 0 auto;
		-moz-box-flex: 1;
		flex: 1 0 auto;
		-webkit-flex-direction: -webkit-column;
		flex-direction: -webkit-column;
		-moz-box-orient: vertical;
		-moz-box-direction: normal;
		flex-direction: -moz-column;
		-ms-flex-direction: -ms-column;
		flex-direction: -ms-column;
		flex-direction: -o-column;
		-webkit-flex-direction: column;
		-ms-flex-direction: column;
		flex-direction: column;

		>.item-flex-center {
			-webkit-align-items: baseline;
			-moz-box-align: baseline;
			align-items: baseline;
			-webkit-box-align: baseline;
			-webkit-box-flex: 1;
			-webkit-box-pack: start;
			display: -webkit-box;
			display: -webkit-flex;
			display: -ms-flexbox;
			display: -moz-box;
			display: flex;
			-ms-flex-align: baseline;
			-moz-flex-grow: 1;
			-o-flex-grow: 1;
			-webkit-flex-grow: 1;
			-moz-box-flex: 1;
			flex-grow: 1;
			-ms-flex-pack: start;
			-ms-flex-positive: 1;
			-webkit-justify-content: flex-start;
			-moz-box-pack: start;
			justify-content: flex-start;
		}

		>[class$="des"],
		>[class$="title"] {
			-webkit-box-flex: 1;
			-moz-flex-grow: 1;
			-o-flex-grow: 1;
			-webkit-flex-grow: 1;
			-moz-box-flex: 1;
			flex-grow: 1;
			-ms-flex-positive: 1;
		}

		>[class$="title"] {
			-webkit-align-items: baseline;
			-moz-box-align: baseline;
			align-items: baseline;
			-webkit-box-align: baseline;
			-webkit-box-pack: start;
			display: -webkit-box;
			display: -webkit-flex;
			display: -ms-flexbox;
			display: -moz-box;
			display: flex;
			-ms-flex-align: baseline;
			-ms-flex-pack: start;
			-webkit-justify-content: flex-start;
			-moz-box-pack: start;
			justify-content: flex-start;
		}

		.item-flex-top {
			-webkit-box-flex: 1;
			-moz-flex-grow: 1;
			-o-flex-grow: 1;
			-webkit-flex-grow: 1;
			-moz-box-flex: 1;
			flex-grow: 1;
			-ms-flex-positive: 1;

			>[class$="title"] {
				-webkit-box-flex: initial;
				-webkit-flex-grow: initial;
				-moz-box-flex: initial;
				flex-grow: initial;
				-ms-flex-positive: initial;
			}
		}
	}
}

@mixin flex-option ($type, $value) {
	@if ($type =="flex-direction") {
		@if ($value =="column") {
			-webkit-box-orient: vertical;
			-webkit-box-direction: normal;
			-ms-flex-direction: column;
			-webkit-flex-direction: column;
			-moz-box-orient: vertical;
			-moz-box-direction: normal;
			flex-direction: column;
		}

		@if ($value =="column-reverse") {
			-webkit-box-orient: vertical;
			-webkit-box-direction: reverse;
			-ms-flex-direction: column-reverse;
			-webkit-flex-direction: column-reverse;
			-moz-box-orient: vertical;
			-moz-box-direction: reverse;
			flex-direction: column-reverse;
		}

		@if ($value =="row") {
			-webkit-box-orient: horizontal;
			-webkit-box-direction: normal;
			-ms-flex-direction: row;
			-webkit-flex-direction: row;
			-moz-box-orient: horizontal;
			-moz-box-direction: normal;
			flex-direction: row;
		}

		@if ($value =="row-reverse") {
			-webkit-box-orient: horizontal;
			-webkit-box-direction: reverse;
			-ms-flex-direction: row-reverse;
			-webkit-flex-direction: row-reverse;
			-moz-box-orient: horizontal;
			-moz-box-direction: reverse;
			flex-direction: row-reverse;
		}
	}

	@if ($type =="justify-content") {
		@if ($value =="center") {
			-webkit-box-pack: center;
			-ms-flex-pack: center;
			-webkit-justify-content: center;
			-moz-box-pack: center;
			justify-content: center;
		}

		@if ($value =="flex-start") {
			-webkit-box-pack: start;
			-ms-flex-pack: start;
			-webkit-justify-content: flex-start;
			-moz-box-pack: start;
			justify-content: flex-start;
		}

		@if ($value =="flex-end") {
			-webkit-box-pack: end;
			-ms-flex-pack: end;
			-webkit-justify-content: flex-end;
			-moz-box-pack: end;
			justify-content: flex-end;
		}

		@if ($value =="space-around") {
			-ms-flex-pack: distribute;
			-webkit-justify-content: space-around;
			justify-content: space-around;
		}

		@if ($value =="space-between") {
			-webkit-box-pack: justify;
			-ms-flex-pack: justify;
			-webkit-justify-content: space-between;
			-moz-box-pack: justify;
			justify-content: space-between;
		}

		@if ($value =="space-evenly") {
			-webkit-box-pack: space-evenly;
			-ms-flex-pack: space-evenly;
			-webkit-justify-content: space-evenly;
			-moz-box-pack: space-evenly;
			justify-content: space-evenly;
		}
	}

	@if ($type =="align-items") {
		@if ($value =="baseline") {
			-webkit-box-align: baseline;
			-ms-flex-align: baseline;
			-webkit-align-items: baseline;
			-moz-box-align: baseline;
			align-items: baseline;
		}

		@if ($value =="center") {
			-webkit-box-align: center;
			-ms-flex-align: center;
			-webkit-align-items: center;
			-moz-box-align: center;
			align-items: center;
		}

		@if ($value =="flex-start") {
			-webkit-box-align: start;
			-ms-flex-align: start;
			-webkit-align-items: flex-start;
			-moz-box-align: start;
			align-items: flex-start;
		}

		@if ($value =="flex-end") {
			-webkit-box-align: end;
			-ms-flex-align: end;
			-webkit-align-items: flex-end;
			-moz-box-align: end;
			align-items: flex-end;
		}

		@if ($value =="flex-end") {
			-webkit-box-align: end;
			-ms-flex-align: end;
			-webkit-align-items: flex-end;
			-moz-box-align: end;
			align-items: flex-end;
		}
	}
}

@mixin order($value) {
	-webkit-box-ordinal-group: #{$value + 1};
	-webkit-order: $value;
	-moz-box-ordinal-group: #{$value + 1};
	-ms-flex-order: $value;
	order: $value;
}

/*#endregion*/

/*#region V-element*/
@mixin v-ele ($type: "height") {
	@if($type =="height") {
		display: table;
		height: 100%;
		width: 100%;
	}

	@if($type =="mid") {
		display: table-cell;
		vertical-align: middle;
		width: 100%
	}

	@if($type =="top") {
		// display: table-header-group;
		display: table-cell;
		vertical-align: top;
		width: 100%;
		// height: 100%;
	}

	@if($type =="bot") {
		// display: table-footer-group;
		display: table-cell;
		vertical-align: bottom;
		width: 100%;
	}
}

/*#endregion*/

/*#region Grid*/
@mixin col-item ($number: 5, $top: 11px, $right: 11px) {
	@if($number ==5) {
		>* {
			width: calc((100% - #{$right + 0.25px}*4) / 5);
			margin-top: $top;
			margin-right: $right;

			@for $i from 1 through 5 {
				&:nth-child(#{$i}) {
					margin-top: 0;
				}
			}

			&:nth-child(5n) {
				margin-right: 0;
			}

			@content;
		}
	}

	@if($number ==4) {
		>* {
			width: calc((100% - #{$right + 0.33}*3) / 4);
			margin-top: $top;
			margin-right: $right - 1px;

			@for $i from 1 through 4 {
				&:nth-child(#{$i}) {
					margin-top: 0;
				}
			}

			&:nth-child(5n) {
				margin-right: $right;
			}

			&:nth-child(4n) {
				margin-right: 0;
			}

			@content;
		}
	}

	@if($number ==3) {
		>* {
			width: calc((100% - #{$right + 0.5}*2) / 3);
			margin-top: $top;
			margin-right: $right;

			@for $i from 1 through 3 {
				&:nth-child(#{$i}) {
					margin-top: 0;
				}
			}

			@for $i from 4 through 5 {
				&:nth-child(#{$i}n) {
					margin-right: $right;
				}
			}

			&:nth-child(3n) {
				margin-right: 0;
			}

			@content;
		}
	}

	@if($number ==2) {
		>* {
			width: calc((100% - #{$right + 1px}*1) / 2);
			margin-top: $top;
			margin-right: $right;

			@for $i from 1 through 2 {
				&:nth-child(#{$i}) {
					margin-top: 0;
				}
			}

			@for $i from 3 through 5 {
				&:nth-child(#{$i}n) {
					margin-right: $right;
				}
			}

			&:nth-child(2n) {
				margin-right: 0;
			}

			@content;
		}
	}

	@if($number ==1) {
		>* {
			width: 100%;
			margin-top: $top;
			margin-right: 0;

			@for $i from 1 through 1 {
				&:nth-child(#{$i}) {
					margin-top: 0;
				}
			}

			@for $i from 2 through 5 {
				&:nth-child(#{$i}n) {
					margin-right: 0;
				}
			}

			@content;
		}
	}
}

@mixin masonry($col: 4, $gap: 15px) {
	-webkit-column-count: $col;
	-moz-column-count: $col;
	column-count: $col;
	-webkit-column-gap: $gap;
	-moz-column-gap: $gap;
	column-gap: $gap;

	>* {
		-webkit-column-break-inside: avoid;
		-moz-column-break-inside: avoid;
		break-inside: avoid;
		display: block;
		page-break-inside: avoid;
		width: 100%;
	}
}

/*#endregion*/

/*#region Order*/
@function calculateRem($size) {
	$remSize: $size / 16px;
	@return $remSize * 1rem;
}

@mixin fontsize($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

@mixin placeholder($target: 'input') {
	#{$target}::placeholder {
		@content;
	}

	#{$target}::-webkit-input-placeholder {
		@content;
	}

	#{$target}::-moz-placeholder {
		@content;
	}

	#{$target}:-ms-input-placeholder {
		@content;
	}

	#{$target}:-moz-placeholder {
		@content;
	}
}

@mixin prefix($text: ',', $margin: 5px, $center: true) {
	@if $center {
		>*:not(:last-child) {
			position: relative;
			margin-right: $margin;

			&:after {
				@include e-cen($type: "top");
				position: absolute;
				content: '#{$text}';
				right: -#{$margin/2};
			}
		}
	}

	@else {
		>*:not(:last-child) {
			margin-right: $margin;

			&:after {
				content: '#{$text}',
			}
		}
	}
}

/*#endregion*/